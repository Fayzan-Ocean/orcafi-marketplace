generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [username], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Asset {
  id              Int     @id @default(autoincrement())
  tokenId         Int     @unique
  name            String
  description     String?
  imageUrl        String?
  contractAddress String
  collectionId    Int
  ownerId         Int
}

model Collection {
  id              Int      @id @default(autoincrement())
  name            String
  slug            String?  @unique
  description     String?
  imageUrl        String?  @db.Text
  symbol          String?
  contractAddress String   @unique
  tokenType       String
  externalUrl     String?
  network         String?
  category        String?
  isSpam          Boolean?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  creatorId       Int?
  coverUrl        String?
  deployer        String?
  totalSupply     Int?
}

model SocialLink {
  id           Int    @id @default(autoincrement())
  url          String
  type         String
  userId       Int
  collectionId Int
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [username], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  wallet        String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  coverImage    String?
  profileImage  String?
  description   String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
